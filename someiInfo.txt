database connection methods


Method 1
```
import express from 'express'
const app = express()

;( async () => {
    try {
        await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
    } catch(error) {
        console.error("ERROR:\t", error)
        throw error
    }

    app.on("errror", (error) => {
        console.log("ERRR:\t", error);
        throw error
    })

    app.listen(process.env.PORT, () => {
        console.log(`App is listening on port ${process.env.PORT}`)
    })

})()
```


Method 2
```
import mongoose from 'mongoose'
import { DB_NAME } from '.\constants'

const connectDB =  async () => {
    try {
        const connectionInstance = await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`);
        console.log(`MongoDB connected Successfully on ${connectionInstance.connection.host}`)
    } catch (error) {
        console.log("MongoDB connection error", error);
        process.exit(1)
    }
}

export default connectDB
```


~~~~~~~~~~~~~~~~~~~~~~~~~~

// require('dotenv').config({ path: './env' })          # commonjs method

~~~~~~~~~~~~~~~~~~~~~~~~~~

const asyncHandler = () => {}
const asyncHandler = (func) => () => {}
const asyncHandler = (func) => async   () => {} 

~~~~~~~~~~~~~~~~~~~~~~~~~~

 method 1
const asyncHandler = (fn) => async (req, res, next) => {
    try {
        await fn(req, res, next)
    } catch (error) {
        res.status(error.code || 500).json({
            success: false,
            message: error.message
        })
    }
}


 method 2
 const asyncHandler = (requestHandler) => {
    (req, res, next) => {
        Promise.resolve(requestHandler(req, res, next)).catch((err) => next(err))
    }
}

export { asyncHandler }

~~~~~~~~~~~~~~~~~~~~~~~~~~

        // const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
        // cb(null, file.fieldname + '-' + uniqueSuffix)

~~~~~~~~~~~~~~~~~~~~~~~~~~
